
// TODO: ‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á Google Apps Script ‡∏ó‡∏µ‡πà deploy ‡πÄ‡∏õ‡πá‡∏ô Web App ‡πÅ‡∏•‡πâ‡∏ß
const GAS_URL = "https://script.google.com/macros/s/AKfycbzMQHSAKRdJ3PxGmzK4IXhyUSLLTAncwuKYKNPxMDNZseGSMMwq8p4TJvcmTv3f83T0/exec";

const $ = (sel) => document.querySelector(sel);
const $$ = (sel) => Array.from(document.querySelectorAll(sel));

const netBadge = $('#net');
const qBadge = $('#queueCount');
const msg = $('#msg');

function updateNetUI() {
  const online = navigator.onLine;
  netBadge.textContent = online ? 'Online' : 'Offline';
  netBadge.className = online ? 'online' : 'offline';
  netBadge.id = 'net';
}
window.addEventListener('online', () => { updateNetUI(); flushQueue(); });
window.addEventListener('offline', updateNetUI);

async function refreshQueueCount() {
  const items = await listQueue();
  qBadge.textContent = `‡∏Ñ‡πâ‡∏≤‡∏á‡∏™‡πà‡∏á: ${items.length}`;
  return items.length;
}

console.log('[MFR] app.js v2.0 loaded'); // ‡πÑ‡∏ß‡πâ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏à‡∏£‡∏¥‡∏á

async function sendPayload(payload) {
  if (!GAS_URL || GAS_URL.startsWith('PUT_YOUR_')) {
    throw new Error('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GAS_URL');
  }

  // ‡∏´‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° urlencoded ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ï‡∏±‡πâ‡∏á Content-Type ‡πÅ‡∏ö‡∏ö simple ‡πÄ‡∏≠‡∏á
  const body = new URLSearchParams();
  body.set('data', JSON.stringify(payload));

  const res = await fetch(GAS_URL, {
    method: 'POST',
    body // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: "‡∏´‡πâ‡∏≤‡∏°" ‡πÉ‡∏™‡πà headers ‡πÄ‡∏≠‡∏á ‡∏à‡∏∞‡πÑ‡∏õ‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô preflight
  });

  // ‡∏ö‡∏≤‡∏á‡∏ó‡∏µ Apps Script ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏™‡πà‡∏á CORS header ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô response ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (opaque)
  // ‡πÄ‡∏£‡∏≤‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MVP
  if (!res.ok && res.type !== 'opaque') {
    throw new Error('‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  }
  return true;
}

async function sendOrQueue(payload) {
  const online = navigator.onLine;
  try {
    if (online) {
      await sendPayload(payload);
      msg.textContent = '‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏µ‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢';
    } else {
      await addToQueue(payload);
      msg.textContent = 'üíæ ‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå: ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß';
    }
  } catch (e) {
    await addToQueue(payload);
    msg.textContent = '‚ö†Ô∏è ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô';
  } finally {
    refreshQueueCount();
  }
}

async function flushQueue() {
  const items = await listQueue();
  if (!navigator.onLine || items.length === 0) return refreshQueueCount();

  msg.textContent = 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ñ‡πâ‡∏≤‡∏á...';
  $('#flushBtn').disabled = true;
  for (const it of items) {
    try {
      await sendPayload(it.payload);
      await removeFromQueue(it.id);
    } catch (e) {
      // ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î (‡∏°‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ô‡πá‡∏ï‡∏•‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠ URL ‡∏ú‡∏¥‡∏î)
      msg.textContent = '‚ö†Ô∏è ‡∏™‡πà‡∏á‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå';
      $('#flushBtn').disabled = false;
      break;
    }
  }
  msg.textContent = '‚òëÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏™‡∏£‡πá‡∏à';
  refreshQueueCount();
}

function collectForm() {
  const activeSymptoms = $$('#symptoms button.active').map(b => b.dataset.s);
  const tempVal = parseFloat($('#temp').value);
  return {
    id: (crypto?.randomUUID && crypto.randomUUID()) || String(Date.now()) + Math.random(),
    name: $('#name').value.trim(),
    passport: $('#passport').value.trim(),
    nation: $('#nation').value.trim(),
    flight: $('#flight').value.trim(),
    temp: Number.isFinite(tempVal) ? tempVal : null,
    symptoms: activeSymptoms,
    note: $('#note').value.trim(),
    ts: new Date().toISOString()
  };
}

function downloadCSV(rows) {
  if (!rows.length) return;
  const header = ['ts','name','passport','nation','flight','temp','symptoms','note'];
  const csv = [header.join(',')].concat(rows.map(r => [
    r.payload.ts,
    r.payload.name,
    r.payload.passport,
    r.payload.nation,
    r.payload.flight,
    r.payload.temp ?? '',
    (r.payload.symptoms || []).join('|'),
    (r.payload.note || '').replace(/[\r\n,]/g,' ')
  ].map(v => `"${String(v).replace(/"/g,'""')}"`).join(','))).join('\n');

  const blob = new Blob([csv], {type:'text/csv;charset=utf-8'});
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'mfr-backup.csv';
  a.click();
  URL.revokeObjectURL(url);
}

function initChips() {
  $$('#symptoms button').forEach(btn => {
    btn.addEventListener('click', () => btn.classList.toggle('active'));
  });
}

document.addEventListener('DOMContentLoaded', async () => {
  updateNetUI();
  initChips();
  refreshQueueCount();
  if (navigator.onLine) flushQueue();

  const form = document.getElementById('reportForm');
  const saveBtn = document.getElementById('saveBtn'); // <-- ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö index.html

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    // ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (e.submitter) ‡∏ï‡∏Å‡∏•‡∏á‡∏ó‡∏µ‡πà saveBtn ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ fallback
    const btn = e.submitter || document.getElementById('saveBtn');

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
    const data = collectForm();
    if (!data.name || !data.passport) {
      msg.textContent = '‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å ‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏•‡∏Ç‡∏û‡∏≤‡∏™‡∏õ‡∏≠‡∏£‡πå‡∏ï ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö';
      return;
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÇ‡∏î‡∏¢‡∏Ñ‡∏£‡πà‡∏≤‡∏ß
    if (data.temp && (data.temp < 30 || data.temp > 45)) {
      msg.textContent = '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞';
      return;
    }

    // ‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏ã‡πâ‡∏≥ + ‡πÉ‡∏™‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    if (btn) { btn.disabled = true; btn.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...'; }

    try {
      await sendOrQueue(data); // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å sendPayload ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏¥‡∏ß
      form.reset();
      document.querySelectorAll('#symptoms button.active').forEach(b => b.classList.remove('active'));
      msg.textContent = navigator.onLine ? '‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏µ‡∏ó‡πÅ‡∏•‡πâ‡∏ß' : 'üíæ ‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå: ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß';
    } catch (err) {
      console.error('[MFR] submit error:', err);
      msg.textContent = '‚ö†Ô∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + (err?.message || err);
    } finally {
      if (btn) { btn.disabled = false; btn.textContent = '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'; }
      refreshQueueCount();
    }
  });

  document.getElementById('flushBtn').addEventListener('click', flushQueue);
  document.getElementById('exportBtn').addEventListener('click', async () => {
    const items = await listQueue();
    if (!items.length) { msg.textContent = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏á‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏ö‡πá‡∏Å‡∏≠‡∏±‡∏õ'; return; }
    downloadCSV(items);
  });
});

